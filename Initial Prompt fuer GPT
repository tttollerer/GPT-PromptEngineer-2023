Du bist mein Webentwickler und wir bauen zusammen eine google chrome extension. die bisherige datenstruktur sieht wie folgt aus: 

in einem Verzeichnis haben wir. fetch_data.js, input_field_creation.js, build_ui.js, content_script.js, data_de.xml, data_en.xml. 

hier ist die Beschreibung: Projektbeschreibung und Funktionalität:

Das Projekt ist eine Google Chrome-Erweiterung, die einen Prompt-Generator für die ChatGPT-Plattform erstellt. Die Erweiterung ermöglicht es Benutzern, schnell und einfach Prompts aus verschiedenen Eingabeelementen wie Dropdowns, Textfeldern und Checkboxen zu erstellen. Die Eingabeelemente werden dynamisch aus externen Datenquellen (in diesem Fall XML-Dateien) geladen, die verschiedene Optionen für die Prompts enthalten. die XML-Daten können in verschiedenen Sprachen vorliegen. Die Sprachen werden in folgenden Dateien gespeichert. deutsch = data_de.xml, englisch = data_en.xml, spanisch = data_es.xml. Beim ändern der Sprache werden alle Elemente gelöscht und neu aufgebaut gemäß der entsprechenden XML. 

Die Funktion Import / Export funktioniert in einer Browser Extension nicht. Daher verwenden wir "window."

Die Hauptfunktionalitäten des Projekts sind:

Laden von Daten aus XML-Dateien: Die Erweiterung lädt Daten aus verschiedenen XML-Dateien, die unterschiedliche Sprachen und Optionen für die Eingabeelemente enthalten.

Erstellen der Benutzeroberfläche: Basierend auf den geladenen Daten wird eine Benutzeroberfläche mit Eingabeelementen wie Dropdowns, Textfeldern und Checkboxen erstellt.

Interaktion mit den Eingabeelementen: Benutzer können die Dropdowns, Textfelder und Checkboxen verwenden, um ihre Auswahl zu treffen. Event-Listener sind vorhanden, um auf Tastaturereignisse und Änderungen in den Eingabeelementen zu reagieren.

Ein- und Ausblenden zusätzlicher Textfelder: Abhängig von den Benutzerauswahlen werden zusätzliche Textfelder ein- oder ausgeblendet. Dies wird durch das Hinzufügen oder Entfernen der Klasse HideInput zu den entsprechenden Textfeldern gesteuert.

Kombination der ausgewählten Texte: Die ausgewählten Texte aus den Eingabeelementen werden kombiniert und in das Ziel-Textfeld auf der ChatGPT-Plattform übertragen.

Zurücksetzen des Formulars und Ausblenden des Prompt-Generators: Nachdem der kombinierte Text gesetzt wurde, wird das Formular zurückgesetzt und der Prompt-Generator ausgeblendet.

Datei- und Funktionsübersicht:

fetch_data.js: Lädt die JSON-Daten aus einer externen Datei. Die Funktion kann angepasst werden, um XML-Dateien zu laden und sie in JSON zu konvertieren.
input_field_creation.js: Enthält Funktionen zum Erstellen von Eingabeelementen wie Dropdowns, Textfeldern und Checkboxen.
build_ui.js: Baut die Benutzeroberfläche basierend auf den geladenen Daten auf und fügt die erstellten Eingabeelemente zum DOM hinzu.
content_script.js: Fügt Event-Listener hinzu und steuert die Hauptfunktionalität des Prompt-Generators, einschließlich der Verarbeitung von Benutzerauswahlen und der Kombination der ausgewählten Texte.
data_de.xml, data_en.xml, data_es.xml: XML-Dateien, die Daten für verschiedene Sprachen enthalten.
manifest.json: Konfigurationsdatei für die Chrome-Erweiterung.
styles.js: JavaScript-Datei, die möglicherweise zusätzliche CSS-Styles hinzufügt oder ändert.
styles.css: Enthält die CSS-Styles für die Erweiterung.


Projekt: ChatGPT PromptEngineer 2023
Dieses Projekt ist eine Chrome-Erweiterung, die darauf abzielt, den ChatGPT-Benutzern eine bessere Erfahrung zu bieten, indem sie ihnen ermöglicht, die Sprache der Benutzeroberfläche auszuwählen und die Eingabeaufforderungen schneller und effizienter zu erstellen.

Technische Details

manifest.json

Manifest-Version: 3
Minimale Chrome-Version: 92
Berechtigungen: activeTab
Inhalts-Skripte: input_field_creation.js, fetch_data.js, build_ui.js, language_switcher.js, styles.js, content_script.js
CSS: styles.css
Web-zugängliche Ressourcen: data_en.xml, data_de.xml, logo.png, Icon128.jpg, Icon48.jpg, Icon16.jpg, OnOff.png, content_script.js
Dateien und Funktionen

input_field_creation.js: Diese Datei erstellt die Eingabefelder und Dropdown-Listen für die Erweiterung, basierend auf den in den XML-Dateien definierten Daten.

fetch_data.js: Diese Datei beinhaltet Funktionen zum Abrufen der Sprachdaten in XML-Format, basierend auf dem ausgewählten Sprachcode (fetchDropdownData()), und zum Auslesen von Cookies (getCookie(name)).

build_ui.js: In dieser Datei befindet sich die Hauptfunktion buildUI(xml), die für den Aufbau der Benutzeroberfläche zuständig ist, indem sie die XML-Daten in HTML-Elemente konvertiert und der Seite hinzufügt.

language_switcher.js: Diese Datei steuert die Hauptlogik für das Umschalten der Sprachen und Aktualisieren der Benutzeroberfläche. Sie enthält Funktionen zum Erstellen des Sprachumschalters (Dropdown-Menü) (createLanguageDropdown()), Laden der Sprachdaten (loadLanguageData(lang)), Aktualisieren der Benutzeroberfläche (updateUI(lang)), und Initialisieren des Sprachumschalters (initLanguageSwitcher()).

styles.js: Diese Datei ist für das Anwenden von benutzerdefinierten CSS-Stilen auf die von der Erweiterung erstellten Elemente verantwortlich.

content_script.js: Diese Datei ist das Hauptinhalts-Skript, das die anderen JavaScript-Dateien verwendet, um die Chrome-Erweiterung zu initialisieren und auszuführen.

Arbeitsablauf

Die Erweiterung lädt die Sprachdaten aus den data_en.xml und data_de.xml Dateien, die in der "web_accessible_resources"-Sektion der manifest.json definiert sind.

Die Benutzeroberfläche wird erstellt und der ChatGPT-Website hinzugefügt. Die Dropdown-Listen und Eingabefelder werden basierend auf den geladenen Sprachdaten erstellt (input_field_creation.js).

Der Benutzer kann die Sprache der Benutzeroberfläche über das Sprachumschalter-Dropdown-Menü


Frag mich gerne wenn du fragen hast. welche dateien möchtest du sehen?